<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Golang - 双Token认证</title>
    <link href="/Meng-Xin/Meng-Xin.github.io/2023/05/13/Golang-%E5%8F%8CToken%E8%AE%A4%E8%AF%81/"/>
    <url>/Meng-Xin/Meng-Xin.github.io/2023/05/13/Golang-%E5%8F%8CToken%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学会如何在 Golang 开发中使用双Token进行验证。</p><span id="more"></span><h1 id="什么是-JWT"><a href="#什么是-JWT" class="headerlink" title="什么是 JWT ?"></a>什么是 JWT ?</h1><blockquote><p><code>jwt</code> ：是 json web token 的缩写，jwt 是服务端通过特定算法生成的的一个凭证信息，主要包含 <code>Header</code>（头部）、<code>Payload</code>（载荷）、<code>Signature</code>（签名）。</p><p>因为http 是无状态的，所以客户端触发的http请求我们不知道用户的状态信息，比如这个用户已经登陆过了。所以衍生出</p></blockquote><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><blockquote><p>令牌头部，记录了整个令牌的类型和签名算法，它是一个描述 jwt元数据的 json 对象</p></blockquote><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><blockquote><p>JWT 第二部分是 Payload，也是一个 Json 对象，除了包含需要传递的数据，还有七个默认的字段供选择。</p><p>一般来说 至少要使用 iss 和  exp 。</p></blockquote><ul><li>iss (issuer)：签发人&#x2F;发行人</li><li>sub (subject)：主题</li><li>aud (audience)：用户</li><li>exp (expiration time)：过期时间</li><li>nbf (Not Before)：生效时间，在此之前是无效的</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：用于标识该 JWT</li></ul><h2 id="SIgnature"><a href="#SIgnature" class="headerlink" title="SIgnature"></a>SIgnature</h2><blockquote><p>JWT 第三部分是签名，主要的生成步骤有以下几点。</p></blockquote><ol><li>首先需要指定一个 secret，该 secret 仅仅保存在服务器中，保证不能让其他用户知道。这个部分需要 base64URL 加密后的 header 和 base64URL 加密后的 payload 使用 </li><li>然后通过header 中声明的加密算法 进行加盐secret组合加密，然后就得出一个签名哈希，也就是Signature，且无法反向解密。</li></ol><h2 id="校验jwt"><a href="#校验jwt" class="headerlink" title="校验jwt"></a>校验jwt</h2><blockquote><p>当服务端生成jwt传递给前端后，前端保存 jwt 信息到浏览器本地，后续请求附加到请求头的 Authorization 中，服务端通过 jwt 的 <code>Header</code> 和 <code>Payload</code> 用同一套哈希算法和同一个<code>secret</code> 计算签名值，让后把计算结果和前端传递的 jwt 第三段进行比较如果相同那么就通过验证，</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="jwt-出现场景"><a href="#jwt-出现场景" class="headerlink" title="jwt 出现场景"></a>jwt 出现场景</h3><blockquote><p>jwt 的出现是因为 http 是无状态的，并且因为使用算法进行计算校验相比服务端存储Session 节省更多资源 jwt 能够适用于更多的场景。</p></blockquote><h3 id="jwt-优缺点"><a href="#jwt-优缺点" class="headerlink" title="jwt 优缺点"></a>jwt 优缺点</h3><p><strong>优点</strong></p><ul><li>持久性：服务端不用存储生成的 jwt 信息，服务器即便重启后也能对历史的 jwt 进行校验。</li><li>节省资源：相对于通过 Session 存储用户的会话信息，服务端可以节省更多资源。</li></ul><p><strong>缺点</strong></p><ul><li>安全性：因为可以存储在客户端，那么数据就可以被篡改，并且 <code>Payload</code> 部分没有加密，只是使用了Base64进行编码，所以 jwt 不能存储敏感信息。</li><li>无法中途废弃：jwt 一旦进行签发，那么只能等到该凭据自动过期，无法强制过期，所以使用时应该尽量用合适的过期时间去签发。（双Token解决）</li><li>续签问题：jwt 什么时候续签？如果续签频繁就违背了 jwt 的设计初衷，如果不续签，又影响用户体验。（双Token 解决）</li></ul><h1 id="Golang：双Token续签"><a href="#Golang：双Token续签" class="headerlink" title="Golang：双Token续签"></a>Golang：双Token续签</h1><h2 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h2><blockquote><p>根据上面的jwt的缺点，我们可以分析道，jwt 续签才是问题所在，那么只要优雅的解决续签问题，其他的就好说了。</p></blockquote><h3 id="1-短Token"><a href="#1-短Token" class="headerlink" title="1.短Token"></a>1.短Token</h3><blockquote><p>我们简称 Authorization 为Atoken，他是一个包含用户信息的主体Token用来，是用户访问权限校验的真实Toekn。所以短Token的生命周期很短，但是维护要很频繁，我们这里设置过期时间为2小时。 </p></blockquote><h3 id="2-长Token"><a href="#2-长Token" class="headerlink" title="2. 长Token"></a>2. 长Token</h3><blockquote><p>我们简称 Reflash 为 Rtoken，他是一个用来帮助刷新Atoken的凭证，所以它不需要记录用户的信息，因此它需要一个较长的生命周期来保证维护短Token的更新。我们这里设置过期时间为 7 天</p></blockquote><h3 id="3-代码总览"><a href="#3-代码总览" class="headerlink" title="3.代码总览"></a>3.代码总览</h3><blockquote><p>核心思想就是：Atoken 肯定会先过期，过期后如果在Rtoken的时间范围内，那么重新生成Atoken。以此来进行维护更新。</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> utils<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;github.com/golang-jwt/jwt/v5&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>ATokenExpiredDuration = <span class="hljs-number">2</span> * time.Hour<br>RTokenExpiredDuration = <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * time.Hour<br>TokenIssuer           = <span class="hljs-string">&quot;admin&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>mySecret          = []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;my Secret Decode&quot;</span>)<br>ErrorInvalidToken = errors.New(<span class="hljs-string">&quot;verify Token Failed&quot;</span>)<br>)<br><br><span class="hljs-comment">// PayLoad 载荷，注意不要存放用户敏感数据。</span><br><span class="hljs-keyword">type</span> PayLoad <span class="hljs-keyword">struct</span> &#123;<br>UserID   <span class="hljs-type">int64</span>  <span class="hljs-string">`json:&quot;user_id&quot;`</span><br>Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span><br>jwt.RegisteredClaims<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getJWTTime</span><span class="hljs-params">(t time.Duration)</span></span> *jwt.NumericDate &#123;<br><span class="hljs-keyword">return</span> jwt.NewNumericDate(time.Now().Add(t))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">keyFunc</span><span class="hljs-params">(token *jwt.Token)</span></span> (any, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> mySecret, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// GenToken 颁发token access token 和 refresh token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenToken</span><span class="hljs-params">(userID <span class="hljs-type">int64</span>, userName <span class="hljs-type">string</span>)</span></span> (atoken, rtoken <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 构建 凭证 基础信息</span><br>rc := jwt.RegisteredClaims&#123;<br>Issuer:    TokenIssuer,                       <span class="hljs-comment">// 颁发人</span><br>ExpiresAt: getJWTTime(ATokenExpiredDuration), <span class="hljs-comment">// 到期时间</span><br>&#125;<br><span class="hljs-comment">// 绑定载荷信息</span><br>at := PayLoad&#123;userID, userName, rc&#125;<br><span class="hljs-comment">// 使用SHA256对载荷非对称加密，进行签名和加盐</span><br>atoken, err = jwt.NewWithClaims(jwt.SigningMethodHS256, at).SignedString(mySecret)<br><br><span class="hljs-comment">// refresh token 长token用来刷新，所以不需要载荷。</span><br>rt := rc<br>rt.ExpiresAt = getJWTTime(RTokenExpiredDuration)<br>rtoken, err = jwt.NewWithClaims(jwt.SigningMethodHS256, rt).SignedString(mySecret)<br><br><span class="hljs-keyword">return</span> atoken, rtoken, err<br>&#125;<br><br><span class="hljs-comment">// VerifyToken 验证Token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">VerifyToken</span><span class="hljs-params">(tokenId <span class="hljs-type">string</span>)</span></span> (pl *PayLoad, err <span class="hljs-type">error</span>) &#123;<br>token, err := jwt.ParseWithClaims(tokenId, pl, keyFunc)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> pl, err<br>&#125;<br><span class="hljs-comment">// 解析成功后为True</span><br><span class="hljs-keyword">if</span> !token.Valid &#123;<br>err = ErrorInvalidToken<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> pl, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// RefreshToken 通过refresh token 刷新 短token(atoken)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RefreshToken</span><span class="hljs-params">(atoken, rtoken <span class="hljs-type">string</span>)</span></span> (newAtoken, newRtoken <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// rtoken 无效退出</span><br><span class="hljs-keyword">if</span> _, err = jwt.Parse(rtoken, keyFunc); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 从旧的access token 中解析出 payload 数据信息</span><br><span class="hljs-keyword">var</span> claim PayLoad<br><span class="hljs-comment">// 校验不通过，并且该错误是因为Token过期引起的，那么进行续签。</span><br>_, err = jwt.ParseWithClaims(atoken, &amp;claim, keyFunc)<br><span class="hljs-keyword">if</span> err == jwt.ErrTokenExpired &#123;<br><span class="hljs-keyword">return</span> GenToken(claim.UserID, claim.Username)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Token</tag>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang 发送邮件 gomail使用</title>
    <link href="/Meng-Xin/Meng-Xin.github.io/2023/02/19/Golang-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6-gomail%E4%BD%BF%E7%94%A8/"/>
    <url>/Meng-Xin/Meng-Xin.github.io/2023/02/19/Golang-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6-gomail%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><blockquote><p>这里我使用的是 “gopkg.in&#x2F;gomail.v2”</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">get</span> gopkg.<span class="hljs-keyword">in</span>/gomail.v2<br></code></pre></td></tr></table></figure><blockquote><p>开启 POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV 服务 授权码</p><p>🦊：<a href="https://wx.mail.qq.com/account">https://wx.mail.qq.com/account</a></p></blockquote><h2 id="方法封装"><a href="#方法封装" class="headerlink" title="方法封装"></a>方法封装</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SendMail 发送邮件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SendMail</span><span class="hljs-params">(mailTo []<span class="hljs-type">string</span>, subject <span class="hljs-type">string</span>, body <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 设置邮箱主体</span><br>mailConn := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;xxxxxxxx@qq.com&quot;</span>, <span class="hljs-comment">//发送人邮箱（邮箱以自己的为准）</span><br><span class="hljs-string">&quot;pass&quot;</span>: <span class="hljs-string">&quot;使用上面的授权码&quot;</span>, <span class="hljs-comment">//发送人邮箱的密码，现在可能会需要邮箱 开启授权密码后在pass填写授权码</span><br><span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;smtp.qq.com&quot;</span>,      <span class="hljs-comment">//邮箱服务器（此时用的是qq邮箱）</span><br>&#125;<br><br>m := gomail.NewMessage(<br><span class="hljs-comment">//发送文本时设置编码，防止乱码。 如果txt文本设置了之后还是乱码，那可以将原txt文本在保存时</span><br><span class="hljs-comment">//就选择utf-8格式保存</span><br>gomail.SetEncoding(gomail.Base64),<br>)<br>m.SetHeader(<span class="hljs-string">&quot;From&quot;</span>, m.FormatAddress(mailConn[<span class="hljs-string">&quot;user&quot;</span>], <span class="hljs-string">&quot;LLL&quot;</span>)) <span class="hljs-comment">// 添加别名</span><br>m.SetHeader(<span class="hljs-string">&quot;To&quot;</span>, mailTo...)                                  <span class="hljs-comment">// 发送给用户(可以多个)</span><br>m.SetHeader(<span class="hljs-string">&quot;Subject&quot;</span>, subject)                               <span class="hljs-comment">// 设置邮件主题</span><br>m.SetBody(<span class="hljs-string">&quot;text/html&quot;</span>, body)                                  <span class="hljs-comment">// 设置邮件正文</span><br><br><span class="hljs-comment">//一个文件（加入发送一个 txt 文件）：/tmp/foo.txt，我需要将这个文件以邮件附件的方式进行发送，同时指定附件名为：附件.txt</span><br><span class="hljs-comment">//同时解决了文件名乱码问题</span><br>name := <span class="hljs-string">&quot;附件.txt&quot;</span><br>m.Attach(<span class="hljs-string">&quot;./gomail.txt&quot;</span>,<br>gomail.Rename(name), <span class="hljs-comment">//重命名</span><br>gomail.SetHeader(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;Content-Disposition&quot;</span>: []<span class="hljs-type">string</span>&#123;<br>fmt.Sprintf(<span class="hljs-string">`attachment; filename=&quot;%s&quot;`</span>, mime.QEncoding.Encode(<span class="hljs-string">&quot;UTF-8&quot;</span>, name)),<br>&#125;,<br>&#125;),<br>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   创建SMTP客户端，连接到远程的邮件服务器，需要指定服务器地址、端口号、用户名、密码，如果端口号为465的话，</span><br><span class="hljs-comment">   自动开启SSL，这个时候需要指定TLSConfig</span><br><span class="hljs-comment">*/</span><br>d := gomail.NewDialer(mailConn[<span class="hljs-string">&quot;host&quot;</span>], <span class="hljs-number">465</span>, mailConn[<span class="hljs-string">&quot;user&quot;</span>], mailConn[<span class="hljs-string">&quot;pass&quot;</span>]) <span class="hljs-comment">// 设置邮件正文</span><br><span class="hljs-comment">//d.TLSConfig = &amp;tls.Config&#123;InsecureSkipVerify: true&#125;</span><br>err := d.DialAndSend(m)<br><span class="hljs-keyword">return</span> err<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><blockquote><p>直接调用上面的方法封装函数即可</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 邮件接收方</span><br>mailTo := []<span class="hljs-type">string</span>&#123;<br><span class="hljs-comment">//可以是多个接收人</span><br><span class="hljs-string">&quot;toObject@qq.com&quot;</span>,<br>&#125;<br><br>subject := <span class="hljs-string">&quot;Hello World!&quot;</span>    <span class="hljs-comment">// 邮件主题</span><br>body := static.ParseString() <span class="hljs-comment">// 邮件正文</span><br><br>err := SendMail(mailTo, subject, body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Send fail! - &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;Send successfully!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小技巧-发送HTML格式的邮件内容"><a href="#小技巧-发送HTML格式的邮件内容" class="headerlink" title="小技巧-发送HTML格式的邮件内容"></a>小技巧-发送HTML格式的邮件内容</h2><blockquote><p>🦊：很多需要验证码操作的流程，我们接受邮件经常可以看到一个 小巧精致的卡片模板。这个就是封装HTML后的格式。<img src="https://lwh-zfile.oss-cn-shanghai.aliyuncs.com/Blog/image-20230219164859201.png?Expires=1676797189&OSSAccessKeyId=TMP.3KecoKYsTmoCwo9ChYAQRibrWWFYZZ1CHpXJGuAjrxSvckEyK1LUfNa6amDNAnMH6cCko4GbQ1iqAoZTzgyXbQXg2SA4eo&Signature=L17ASqyMRPBwHjCfOsOYf+Mqt9Y="></p></blockquote><p>1.创建样式模板</p><blockquote><p>例如 static&#x2F;cardEmail.html</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ParseString 读取对应文件输出string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseString</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-type">byte</span>, err := ioutil.ReadFile(<span class="hljs-string">&quot;./static/cardEmail.html&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;ReadFile error:&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(<span class="hljs-type">byte</span>)<br>&#125;<br><br><span class="hljs-comment">// 发送邮件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    styleInfo := ParseString()<br>    err := SendMail(mailTo, subject, styleInfo)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;Send Email Error&quot;</span>+err.Error())<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Golang 邮件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go-swagger安装与使用</title>
    <link href="/Meng-Xin/Meng-Xin.github.io/2023/02/17/go-swagger%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/Meng-Xin/Meng-Xin.github.io/2023/02/17/go-swagger%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Golang-环境下使用-swagger"><a href="#Golang-环境下使用-swagger" class="headerlink" title="Golang 环境下使用 swagger"></a>Golang 环境下使用 swagger</h1><h2 id="1-安装swagger工具"><a href="#1-安装swagger工具" class="headerlink" title="1.安装swagger工具"></a>1.安装swagger工具</h2><blockquote><p>全局环境安装 swagger-go工具</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 工具安装</span><br>go install github.com<span class="hljs-regexp">/swaggo/</span>swag<span class="hljs-regexp">/cmd/</span>swag@latest<br><span class="hljs-comment"># 依赖源安装</span><br>go get -u github.com<span class="hljs-regexp">/swaggo/gi</span>n-swagger<br>go get -u github.com<span class="hljs-regexp">/swaggo/</span>files<br></code></pre></td></tr></table></figure><h2 id="2-初步使用Swagger"><a href="#2-初步使用Swagger" class="headerlink" title="2.初步使用Swagger"></a>2.初步使用Swagger</h2><blockquote><p><code>swag初始化</code> 默认生成文件.&#x2F;docs&#x2F;</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">swag <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>main.go 中匿名引入包 “YouGoModName&#x2F;docs”</p><p><code>路由集成</code> 需要在路由中配置我们的swagger</p><p>例如：下面这段代码</p></blockquote><ol><li>初始化使用：在项目目录使用命令 <code>swag init</code></li><li>使用注解：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//@Summary创建文章</span><br><span class="hljs-comment">//@Producejson</span><br><span class="hljs-comment">//@Paramuser_namebodystringtrue&quot;账号&quot;</span><br><span class="hljs-comment">//@Parampasswordbodystringtrue&quot;密码&quot;</span><br><span class="hljs-comment">//@Paramemailbodystringfalse&quot;邮箱&quot;</span><br><span class="hljs-comment">//@Paramnick_namebodyintfalse&quot;昵称&quot;</span><br><span class="hljs-comment">//@Success200&#123;object&#125;Article&quot;成功&quot;</span><br><span class="hljs-comment">//@Failure400&#123;object&#125;string&quot;请求错误&quot;</span><br><span class="hljs-comment">//@Router/api/v1/user/register [post]</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UserRegister</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> userRegisterService service.UserService<br>err := c.ShouldBindJSON(&amp;userRegisterService)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>c.JSON(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;注册接口数据格式错误&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res := userRegisterService.Register(c.Request.Context())<br>c.JSON(<span class="hljs-number">200</span>, res)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>路由组配置sawgger</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewRouter</span><span class="hljs-params">()</span></span> *gin.Engine &#123;<br>r := gin.Default()<br><br>r.Use(middleware.Cors())<br><br><span class="hljs-comment">// 公共路由组</span><br>publicGroup := r.Group(<span class="hljs-string">&quot;&quot;</span>)<br>publicGroup.GET(<span class="hljs-string">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))<br><br><span class="hljs-comment">// V1管理路由组</span><br>v1 := r.Group(<span class="hljs-string">&quot;api/v1&quot;</span>)<br>&#123;<br>v1.GET(<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, <span class="hljs-string">&quot;Success&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 用户操作</span><br>v1.POST(<span class="hljs-string">&quot;user/register&quot;</span>, api.UserRegister)<br>&#125;<br><br><span class="hljs-keyword">return</span> r<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>使用 <code>swag fmt </code> 格式化我们的注解信息</li><li>使用 <code>swag init</code> 重新加载生成我们的注解对应doc文件。</li><li>启动项目，点击：<a href="http://127.0.0.1/swagger/index.html">Swagger UI</a> 就可以看到我们的配置是否成功运行了。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Golang | go-swagger | gin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 下安装Golang环境</title>
    <link href="/Meng-Xin/Meng-Xin.github.io/2023/02/17/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85Golang%E7%8E%AF%E5%A2%83/"/>
    <url>/Meng-Xin/Meng-Xin.github.io/2023/02/17/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85Golang%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="环境安装前提"><a href="#环境安装前提" class="headerlink" title="环境安装前提"></a>环境安装前提</h2><p>  1.查看安装物理机信息<br>  <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-16</span><span class="hljs-number">-14</span>-centos ~]<span class="hljs-meta"># uname -m</span><br>x86_64<br></code></pre></td></tr></table></figure><br>  2.根据输出信息去Golang官网下载对应安装包<br>  [Golang官网](<a href="https://golang.google.cn/dl/">Downloads - The Go Programming Language (google.cn)</a>)<br>  3.使用远程拷贝命令</p>  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp go1.<span class="hljs-number">20</span>.linux-amd64.tar.gz remote_username<span class="hljs-variable">@remote_ip</span><span class="hljs-symbol">:remote_file</span> <br><span class="hljs-comment">#例如我的</span><br>scp go1.<span class="hljs-number">20</span>.linux-amd64.tar.gz root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.247</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/root</span><br></code></pre></td></tr></table></figure><p> 4.解压文件，并配置环境变量。<br>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#解压到  /usr/local</span><br>tar -C /usr/local -zxvf  go1.20.linux-amd64.tar.gz<br><span class="hljs-comment">#配置环境变量</span><br>sudo vim ~/.bashrc#在尾部写入<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOROOT</span>=/usr/local/go<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$GOROOT/bin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOPATH</span>=/home/hesunfly/code/go<br><span class="hljs-comment">#保存退出</span><br>:wq<br></code></pre></td></tr></table></figure><br>  5.刷新配置<br><code>source ~/.bashrc</code><br>  6.测试使用<br>  <code>go env 正常输出即可</code><br>  7.配置七牛云代理</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">GO111MODULE</span>=on<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOPROXY</span>=https://goproxy.cn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Golang Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/Meng-Xin/Meng-Xin.github.io/2023/02/16/hello-world/"/>
    <url>/Meng-Xin/Meng-Xin.github.io/2023/02/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
